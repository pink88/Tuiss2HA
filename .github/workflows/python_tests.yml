# This is a basic workflow to help you get started with Actions.
# The name of the workflow as it will appear in the "Actions" tab of your GitHub repository.
name: Python application tests

# Controls when the workflow will run.
on:
  # Triggers the workflow on a push to any branch.
  push:
    branches:
      - '**'
  # Triggers the workflow on a pull request to any branch.
  pull_request:
    branches:
      - '**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "build".
  build:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - uses: actions/checkout@v4

      # Step 2: Sets up a Python environment for you to use.
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Step 3: Installs the testing tools.
      # The reference to requirements.txt has been removed.
      # Added bleak_retry_connector to resolve the ModuleNotFoundError.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_test.txt

      # Step 4: Create a definitive conftest.py override
      # This step programmatically creates a configuration file in the runner.
      # This is the most powerful way to configure pytest and will not be ignored.
      - name: Create conftest.py to disable conflicting plugins
        run: |
          echo """
          import sys
          import asyncio

          def pytest_configure(config):
              # Forcefully unregister the pytest-socket plugin to prevent it from
              # blocking the Home Assistant test framework's event loop setup.
              # This is the most reliable way to resolve the conflict.
              if config.pluginmanager.has_plugin('socket'):
                  socket_plugin = config.pluginmanager.get_plugin('socket')
                  config.pluginmanager.unregister(socket_plugin)

              # Set the correct event loop policy for non-Windows runners.
              # While the primary issue was on Windows, this ensures consistency.
              if sys.platform != 'win32':
                  asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())
          """ > conftest.py

      # Step 5: Run tests with the override in place
      # No command-line flags are needed, as the conftest.py handles all configuration.
      - name: Test with pytest
        run: |
          python -m pytest
